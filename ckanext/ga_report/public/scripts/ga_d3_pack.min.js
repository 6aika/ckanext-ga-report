(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.viz == null) {
    window.viz = {};
  }

  $(function() {
    return d3.json('/scripts/json/ga_reports.json', function(data) {
      var endAngle, graph_pie1, graph_pie2, graph_pie3, graph_pie4, initialDelay, setMonthData, startAngle;
      graph_pie1 = new viz.PieChart('#graph_pie1', data.monthlydata[0].pie1, d3.scale.category20(), initialDelay = 200);
      graph_pie2 = new viz.PieChart('#graph_pie2', data.monthlydata[0].pie2, d3.scale.category20(), initialDelay = 350, startAngle = Math.PI / 2, endAngle = Math.PI * 5 / 2);
      graph_pie3 = new viz.PieChart('#graph_pie3', data.monthlydata[0].pie3, d3.scale.category20(), initialDelay = 500, startAngle = Math.PI, endAngle = Math.PI * 3);
      graph_pie4 = new viz.PieChart('#graph_pie4', data.monthlydata[0].pie4, d3.scale.category20(), initialDelay = 650, startAngle = Math.PI * 3 / 2, endAngle = Math.PI * 7 / 2);
      setMonthData = function(monthData) {
        graph_pie1.setData(monthData.pie1);
        graph_pie2.setData(monthData.pie2);
        graph_pie3.setData(monthData.pie3);
        return graph_pie4.setData(monthData.pie4);
      };
      return d3.select('#monthselector').selectAll('button').data(data.monthlydata).enter().append('button').text(function(d) {
        return d.datename;
      }).on('click', setMonthData);
    });
  });

  viz.PieChart = (function() {
    function PieChart(selector, data, colorFunction, initialDelay, startAngle, endAngle) {
      var height, width;
      this.colorFunction = colorFunction;
      if (initialDelay == null) {
        initialDelay = 0;
      }
      this.startAngle = startAngle != null ? startAngle : 0;
      this.endAngle = endAngle != null ? endAngle : Math.PI * 2;
      this.setData = __bind(this.setData, this);
      assert(data, 'No data received');
      width = 220;
      height = 200;
      this.radius = Math.min(width, height) / 2;
      this.container = d3.select(selector).append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");
      this.transitionDelay = initialDelay;
      this.transitionDuration = 500;
      this.setData(data);
    }

    PieChart.prototype.setData = function(data) {
      var arcGenerator, arcTween, centroidArcGenerator, centroidTween, defaultData, layoutPieChart, paths, textTween, texts,
        _this = this;
      defaultData = {
        startAngle: this.startAngle,
        endAngle: this.startAngle,
        value: 0
      };
      layoutPieChart = d3.layout.pie().sort(function(a, b) {
        return a.name.localeCompare(b.name);
      }).value(function(x) {
        return x.value;
      }).startAngle(this.startAngle).endAngle(this.endAngle);
      data = layoutPieChart(data);
      arcGenerator = d3.svg.arc().outerRadius(this.radius).innerRadius(0);
      centroidArcGenerator = d3.svg.arc().outerRadius(this.radius * 1.6).innerRadius(0);
      paths = this.container.selectAll('path').data(data);
      texts = this.container.selectAll('text').data(data);
      paths.enter().append('path').attr('fill', function(d, i) {
        return _this.colorFunction(d.data.name);
      });
      texts.enter().append('text').attr('dy', '0.5em').attr('text-anchor', 'middle').attr('fill-opacity', 0);
      arcTween = function(d) {
        var interpolator;
        interpolator = d3.interpolate(this._current || defaultData, d);
        this._current = d;
        return function(i) {
          return arcGenerator(interpolator(i));
        };
      };
      centroidTween = function(d) {
        var interpolator;
        interpolator = d3.interpolate(this._current || defaultData, d);
        this._current = d;
        return function(i) {
          return 'translate(' + centroidArcGenerator.centroid(interpolator(i)) + ')';
        };
      };
      textTween = function(d) {
        var from, interpolator;
        from = this._current2 || defaultData;
        this._current2 = d;
        interpolator = d3.interpolate(from, this._current2);
        return function(i) {
          return this.textContent = '' + Math.round(interpolator(i).value);
        };
      };
      paths.transition().duration(this.transitionDuration).delay(this.transitionDelay).attrTween("d", arcTween);
      texts.transition().duration(this.transitionDuration).delay(this.transitionDelay).attrTween("transform", centroidTween).attr('fill-opacity', function(d) {
        if (d.value) {
          return 1;
        } else {
          return 0;
        }
      }).tween('text', textTween);
      this.transitionDuration = 800;
      return this.transitionDelay = 100;
    };

    return PieChart;

  })();

}).call(this);
