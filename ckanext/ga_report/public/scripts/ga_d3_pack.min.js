(function() {
  if (window.viz == null) {
    window.viz = {};
  }

  $(function() {
    return d3.json('/scripts/json/ga_reports.json', function(data) {
      var dummy1, graph_pie1, setMonthData;
      dummy1 = new viz.Dummy('#dummy1', data.monthlydata[0].pie1, d3.scale.category20());
      graph_pie1 = new viz.PieChart('#graph_pie1', data.monthlydata[0].pie1, d3.scale.category20());
      setMonthData = function(monthData) {
        dummy1.setData(monthData.pie1);
        return graph_pie1.setData(monthData.pie1);
      };
      return d3.select('#monthselector').selectAll('button').data(data.monthlydata).enter().append('button').text(function(d) {
        return d.datename;
      }).on('click', setMonthData);
    });
  });

  viz.Dummy = (function() {
    function Dummy(selector, data) {
      this.selector = selector;
      assert(data, "No Data");
      this.setData(data);
    }

    Dummy.prototype.setData = function(data) {
      var divz;
      divz = d3.select(this.selector).selectAll('div').data(data);
      divz.enter().append('div').style('width', 0).style('overflow', 'hidden').style('white-space', 'nowrap');
      divz.exit().remove();
      divz.text(function(d) {
        return d.name + ' (' + d.value + ')';
      }).style('background', '#fcf').style('margin-top', '2px').transition().duration(800).delay(100).style('width', function(d) {
        return 100 + (d.value * 3) + 'px';
      });
      return divz.append('span').classed('inner', true).style('background', '#0ff').text(function(d) {
        return d.value;
      });
    };

    return Dummy;

  })();

  viz.PieChart = (function() {
    function PieChart(selector, data, colorFunction, startAngle, endAngle) {
      this.colorFunction = colorFunction;
      this.startAngle = startAngle != null ? startAngle : 0;
      this.endAngle = endAngle != null ? endAngle : Math.PI * 2;
      assert(data, 'No data received');
      this.width = 220;
      this.height = 200;
      this.radius = Math.min(this.width, this.height) / 2;
      this.container = d3.select(selector).append("svg").attr("width", this.width).attr("height", this.height).append("g").attr("transform", "translate(" + (this.width / 2) + "," + (this.height / 2) + ")");
      this.setData(data);
    }

    PieChart.prototype.setData = function(data) {
      var arcGenerator, arcTween, initialArc, layoutPieChart, paths,
        _this = this;
      initialArc = {
        startAngle: this.startAngle,
        endAngle: this.startAngle,
        value: 0
      };
      layoutPieChart = d3.layout.pie().sort(function(a, b) {
        return a.name.localeCompare(b.name);
      }).value(function(x) {
        return x.value;
      }).startAngle(this.startAngle).endAngle(this.endAngle);
      arcGenerator = d3.svg.arc().outerRadius(this.radius);
      arcTween = function(d) {
        var interpolator;
        interpolator = d3.interpolate(this._current, d);
        this._current = d;
        return function(i) {
          return arcGenerator(interpolator(i));
        };
      };
      paths = this.container.selectAll('path').data(layoutPieChart(data));
      paths.enter().append('path').each(function(d) {
        return this._current = initialArc;
      });
      paths.exit().remove();
      return paths.attr('fill', function(d, i) {
        return _this.colorFunction(d.data.name);
      }).transition().duration(800).delay(100).attrTween("d", arcTween);
    };

    return PieChart;

  })();

}).call(this);
